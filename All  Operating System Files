Operating Systems
Lab Assignment 1
Surindernath Sivakumar
21BCE 3474
Code –
#include <iostream>
#include <vector>
using namespace std;
struct Process {
 int id;
 int arrival;
 int burst;
};
void FCFS(vector<Process>& processes) {
 int n = processes.size();
 vector<int> completion(n, 0);
 vector<int> turnaround(n, 0);
 vector<int> waiting(n, 0);
 completion[0] = processes[0].burst;
 for (int i = 0; i < n; i++) {
 turnaround[i] = completion[i] - processes[i].arrival;
 waiting[i] = turnaround[i] - processes[i].burst;
 }
 for (int i = 1; i < n; i++) {
 completion[i] = max(processes[i].arrival, completion[i - 1]) + processes[i].burst;
 }
 cout << "Process\tAT\tBT\tCT\tTAT\tWT\n";
int totalTurnaround = 0;
 int totalWaiting = 0;
 for (int i = 0; i < n; i++) {
 cout << processes[i].id << "\t\t" << processes[i].arrival << "\t\t" << processes[i].burst
<< "\t\t" << completion[i] << "\t\t" << turnaround[i] << "\t\t" << waiting[i] << "\n";
 totalTurnaround += turnaround[i];
 totalWaiting += waiting[i];
 }
 cout << "\nAverage TAT: " << static_cast<float>(totalTurnaround) / n;
 cout << "\nAverage WT: " << static_cast<float>(totalWaiting) / n;
 cout << "\nSurindernath Sivakumar 21BCE3474";
}
int main() {
 int n;
 cout << "Enter the number of processes: ";
 cin >> n;
 vector<Process> processes(n);
 cout << "Enter AT and BT for each process:\n";
 for (int i = 0; i < n; i++) {
 cout << "Process " << i + 1 << " AT: ";
 cin >> processes[i].arrival;
 cout << "Process " << i + 1 << " BT: ";
 cin >> processes[i].burst;
 processes[i].id = i + 1;
 }
 FCFS(processes);
 return 0;
}
Output –
Code –
#include <iostream>
#include <cstring>
using namespace std;
int main()
{
 int bt[20], at[10], n, i, j, temp, st[10], ft[10], wt[10], ta[10];
 int totwt = 0, totta = 0;
 double awt, ata;
 char pn[10][10], t[10];
 cout << "Enter the number of processes: ";
 cin >> n;
 for (i = 0; i < n; i++)
 {
 cout << "Enter process name, arrival time & burst time: ";
 cin >> pn[i] >> at[i] >> bt[i];
 }
 for (i = 0; i < n; i++)
 {
 for (j = 0; j < n; j++)
 {
 if (bt[i] < bt[j])
 {
 temp = at[i];
 at[i] = at[j];
 at[j] = temp;
 temp = bt[i];
 bt[i] = bt[j];
 bt[j] = temp;
 strcpy(t, pn[i]);
 strcpy(pn[i], pn[j]);
 strcpy(pn[j], t);
 }
 }
 }
 for (i = 0; i < n; i++)
 {
 if (i == 0)
 st[i] = at[i];
 else
 st[i] = ft[i - 1];
 wt[i] = st[i] - at[i];
 ft[i] = st[i] + bt[i];
 ta[i] = ft[i] - at[i];
 totwt += wt[i];
 totta += ta[i];
 }
 awt = static_cast<double>(totwt) / n;
 ata = static_cast<double>(totta) / n;
 cout << "\nProcess Name\tArrival Time\tBurst Time\tWaiting Time\tTurnaround
Time\n";
 for (i = 0; i < n; i++)
 {
 cout << pn[i] << "\t\t" << at[i] << "\t\t" << bt[i] << "\t\t" << wt[i] << "\t\t" << ta[i] <<
endl;
 }
 cout << "\nAverage waiting time: " << awt;
 cout << "\nAverage turnaround time: " << ata;
 cout << "\nSurindernath Sivakumar 21BCE3474";
 return 0;
}
Output –
Code –
#include <stdio.h>
#include <stdlib.h>
struct Process {
 int processID;
 int arrivalTime;
 int burstTime;
 int priority;
};
void swap(struct Process* a, struct Process* b) {
 struct Process temp = *a;
 *a = *b;
 *b = temp;
}
void priorityScheduling(struct Process* processes, int n) {
 int i, j;
 for (i = 0; i < n; i++) {
 for (j = i + 1; j < n; j++) {
 if (processes[j].arrivalTime < processes[i].arrivalTime) {
 swap(&processes[i], &processes[j]);
 }
 else if (processes[j].arrivalTime == processes[i].arrivalTime && processes[j].priority
< processes[i].priority) {
 swap(&processes[i], &processes[j]);
 }
 }
 }
 int* completionTime = (int*)malloc(n * sizeof(int));
 int* turnaroundTime = (int*)malloc(n * sizeof(int));
 int* waitingTime = (int*)malloc(n * sizeof(int));
 int currentTime = 0;
 for (i = 0; i < n; i++) {
 if (currentTime < processes[i].arrivalTime) {
 currentTime = processes[i].arrivalTime;
 }
 int minPriorityIdx = i;
 for (j = i + 1; j < n; j++) {
 if (processes[j].arrivalTime <= currentTime && processes[j].priority <
processes[minPriorityIdx].priority) {
 minPriorityIdx = j;
 }
 }
 swap(&processes[i], &processes[minPriorityIdx]);
 completionTime[i] = currentTime + processes[i].burstTime;
 turnaroundTime[i] = completionTime[i] - processes[i].arrivalTime;
 waitingTime[i] = turnaroundTime[i] - processes[i].burstTime;
 currentTime = completionTime[i];
 }
 printf("Process\tArrival Time\tBurst Time\tPriority\tCompletion Time\tTurnaround
Time\tWaiting Time\n");
 int totalTurnaroundTime = 0;
 int totalWaitingTime = 0;
 for (i = 0; i < n; i++) {
 printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID,
processes[i].arrivalTime, processes[i].burstTime, processes[i].priority, completionTime[i],
turnaroundTime[i], waitingTime[i]);
 totalTurnaroundTime += turnaroundTime[i];
 totalWaitingTime += waitingTime[i];
 }
 printf("\nAverage Turnaround Time: %.2f", (float)totalTurnaroundTime / n);
 printf("\nAverage Waiting Time: %.2f", (float)totalWaitingTime / n);
 free(completionTime);
 free(turnaroundTime);
 free(waitingTime);
}
int main() {
 int n;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 struct Process* processes = (struct Process*)malloc(n * sizeof(struct Process));
 printf("Enter arrival time, burst time, and priority for each process:\n");
 for (int i = 0; i < n; i++) {
 printf("Process %d Arrival Time: ", i + 1);
 scanf("%d", &processes[i].arrivalTime);
 printf("Process %d Burst Time: ", i + 1);
 scanf("%d", &processes[i].burstTime);
 printf("Process %d Priority: ", i + 1);
 scanf("%d", &processes[i].priority);
 processes[i].processID = i + 1;
 }
 priorityScheduling(processes, n);
 printf("\nSurindernath Sivakumar 21BCE3474");
 free(processes);
 return 0;
}
Output –
Code –
#include <iostream>
using namespace std;
struct Process {
 int WT, AT, BT, TAT;
};
int main() {
 int n;
 int count = 0, t = 0, short_P;
 float total_WT = 0, total_TAT = 0, Avg_WT, Avg_TAT;
 cout << "Enter the number of processes: ";
 cin >> n;
 Process a[10];
 int temp[10];
 cout << "Enter the arrival time and burst time of the processes:\n";
 cout << "AT WT\n";
 for (int i = 0; i < n; i++) {
 cin >> a[i].AT >> a[i].BT;
 temp[i] = a[i].BT;
 }
 a[9].BT = 10000;
 for (t = 0; count != n; t++) {
 short_P = 9;
 for (int i = 0; i < n; i++) {
 if (a[i].BT < a[short_P].BT && (a[i].AT <= t && a[i].BT > 0)) {
 short_P = i;
 }
 }
 a[short_P].BT = a[short_P].BT - 1;
 if (a[short_P].BT == 0) {
 count++;
 a[short_P].WT = t + 1 - a[short_P].AT - temp[short_P];
 a[short_P].TAT = t + 1 - a[short_P].AT;
 total_WT = total_WT + a[short_P].WT;
 total_TAT = total_TAT + a[short_P].TAT;
 }
 }
 Avg_WT = total_WT / n;
 Avg_TAT = total_TAT / n;
 cout << "ID\tWT\tTAT\n";
 for (int i = 0; i < n; i++) {
 cout << i + 1 << "\t" << a[i].WT << "\t" << a[i].TAT << "\n";
 }
 cout << "Average waiting time of the processes: " << Avg_WT << "\n";
 cout << "Average turnaround time of the processes: " << Avg_TAT << "\n";
 cout << "Surindernath Sivakumar 21BCE3474";
 return 0;
}
Output –
Code –
#include <iostream>
using namespace std;
int main() {
 int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10];
 float avg_wt, avg_tat;
 cout << "Enter the number of processes: ";
 cin >> NOP;
 y = NOP;
 for (i = 0; i < NOP; i++) {
 cout << "Process[" << i + 1 << "]\n";
 cout << "Enter Arrival time: ";
 cin >> at[i];
 cout << "Enter Burst time: ";
 cin >> bt[i];
 temp[i] = bt[i];
 }
 cout << "Enter the Time Quantum for the process: ";
 cin >> quant;
 cout << "\nProcess No \t\t Burst Time \t\t TAT \t\t Waiting Time\n";
 for (sum = 0, i = 0; y != 0;) {
 if (temp[i] <= quant && temp[i] > 0) {
 sum = sum + temp[i];
 temp[i] = 0;
 count = 1;
 } else if (temp[i] > 0) {
 temp[i] = temp[i] - quant;
 sum = sum + quant;
 }
 if (temp[i] == 0 && count == 1) {
 y--;
 cout << "Process No[" << i + 1 << "]\t\t" << bt[i] << "\t\t\t\t" << sum - at[i] <<
"\t\t\t" << sum - at[i] - bt[i] << "\n";
 wt = wt + sum - at[i] - bt[i];
 tat = tat + sum - at[i];
 count = 0;
 }
 if (i == NOP - 1) {
 i = 0;
 } else if (at[i + 1] <= sum) {
 i++;
 } else {
 i = 0;
 }
 }
 avg_wt = static_cast<float>(wt) / NOP;
 avg_tat = static_cast<float>(tat) / NOP;
 cout << "Average Waiting Time: " << avg_wt << "\n";
 cout << "Average Turnaround Time: " << avg_tat << "\n";
 cout << "Surindernath Sivakumar 21BCE3474";
 return 0;
}
Output –
Code –
#include <iostream>
using namespace std;
struct Process {
 int WT, AT, BT, TAT, PT;
};
int main() {
 int n, temp[10], t, count = 0, short_p;
 float total_WT = 0, total_TAT = 0, Avg_WT, Avg_TAT;
 cout << "Enter the number of processes: ";
 cin >> n;
 cout << "Enter the arrival time, burst time, and priority of the processes:\n";
 cout << "AT BT PT\n";
 Process a[10];
 for (int i = 0; i < n; i++) {
 cin >> a[i].AT >> a[i].BT >> a[i].PT;
 temp[i] = a[i].BT;
 }
 a[9].PT = 10000;
 for (t = 0; count != n; t++) {
 short_p = 9;
 for (int i = 0; i < n; i++) {
 if (a[short_p].PT > a[i].PT && a[i].AT <= t && a[i].BT > 0) {
 short_p = i;
 }
 }
 a[short_p].BT = a[short_p].BT - 1;
 if (a[short_p].BT == 0) {
 count++;
 a[short_p].WT = t + 1 - a[short_p].AT - temp[short_p];
 a[short_p].TAT = t + 1 - a[short_p].AT;
 total_WT = total_WT + a[short_p].WT;
 total_TAT = total_TAT + a[short_p].TAT;
 }
 }
 Avg_WT = total_WT / n;
 Avg_TAT = total_TAT / n;
 cout << "ID\tWT\tTAT\n";
 for (int i = 0; i < n; i++) {
 cout << i + 1 << "\t" << a[i].WT << "\t" << a[i].TAT << "\n";
 }
 cout << "Avg waiting time of the processes: " << Avg_WT << "\n";
 cout << "Avg turn around time of the processes: " << Avg_TAT << "\n";
 cout << "\nSurindernath Sivakumar 21BCE3474";
 return 0;
}
Output –





Operating Systems Lab Da 2
Code 1:
echo "Enter the number"
read a
numero=0
while [ $a -gt 0 ]
do
numero=$(expr $numero \* 10)
k=$(expr $a % 10)
numero=$(expr $numero + $k)
a=$(expr $a / 10)
done
echo "Reversed Number is $numero"
echo "This Code has been excecuted sucessfully by Surindernath Sivakumar 21BCE3474"
Output 1:
Code 2:
echo "Enter two integers: "
read a b
result=`expr $a + $b`
echo "Addition: $result"
result1=`expr $a - $b`
echo "Subtraction: $result1"
result2=`expr $a \* $b`
echo "Multiplication: $result2"
result3=`expr $a / $b`
echo "Division: $result3"
result4=`expr $a % $b`
echo "Remainder: $result4"
if [ $a == $b ]
then
echo "a=b"
fi
if [ $a != $b ]
then
echo "a!=b"
fi
echo "Surindernath Sivakumar 21BCE3474"
Output2:
Code 3:
echo "Enter the number:"
read a
for((i=1;i<11;i++))
do
value=`expr $i \* $a`
echo $value
done
echo "Surindernath Sivakumar 21BCE3474"
Output 3:





Digital Assignment 3
Operating Systems Lab
Name: Surindernath Sivakumar
Reg No: 21BCE3474
Question 1:
1. Implement a thread using fork and other system calls to
a) Display the parent and child process and their ID
b) Show the Zomibe Process
c) Print the Orphan Process
Answer 1:
Code:
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
int main() {
 pid_t pid;
 pid = fork();
 if (pid < 0) {
 fprintf(stderr, "Fork failed\n");
 return 1;
 } else if (pid == 0) {
 printf("Child process: PID = %d\n", getpid());
 sleep(5);
 exit(0);
 } else {
 printf("Parent process: PID = %d\n", getpid());
 printf("Child process ID: %d\n", pid);
 sleep(10);
 system("ps aux | grep defunct");
 wait(NULL);
 pid_t orphanPid = fork();
 if (orphanPid < 0) {
 fprintf(stderr, "Fork failed\n");
 return 1;
 } else if (orphanPid == 0) {
 printf("Orphan process: PID = %d, Parent PID = %d\n", getpid(), getppid());
 sleep(10);
 printf("Orphan process exiting\n");
 } else {
 printf("Parent process: PID = %d\n", getpid());
 sleep(5);
 printf("Parent process exiting\n");
 }
 }
 printf("This Code Has Been Sucessfully Run And Excecuted By Surindernath
Sivakumar 21BCE3474");
 return 0;
}
Output:
Question 2:
2. The banker’s algorithm is a resource allocation and deadlock avoidance
algorithm that
tests for safety by simulating the allocation for predetermined maximum possible
amounts of all resources, then makes an “s-state” check to test for possible
activities,
before deciding whether allocation should be allowed to continue. Assume own
example to illustrate and implement the same to
a) Display one sequence shows the safe sequence.
b) Display the unsafe scenario.
c) Display the additional request after the safe state can be satisfied or not.
Code :
#include <stdio.h>
#include <stdbool.h>
#define MAX_PROCESSES 5
#define MAX_RESOURCES 3
int available[MAX_RESOURCES];
int maximum[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
bool finished[MAX_PROCESSES];
bool canAllocate(int process) {
 for (int i = 0; i < MAX_RESOURCES; i++) {
 if (need[process][i] > available[i])
 return false;
 }
 return true;
}
void allocateResources(int process) {
 for (int i = 0; i < MAX_RESOURCES; i++) {
 available[i] -= need[process][i];
 allocation[process][i] += need[process][i];
 need[process][i] = 0;
 }
}
void freeResources(int process) {
 for (int i = 0; i < MAX_RESOURCES; i++) {
 available[i] += allocation[process][i];
 allocation[process][i] = 0;
 need[process][i] = maximum[process][i];
 }
}
bool findSafeSequence(int safeSequence[]) {
 int work[MAX_RESOURCES];
 bool canFinish[MAX_PROCESSES];
 for (int i = 0; i < MAX_RESOURCES; i++)
 work[i] = available[i];
 for (int i = 0; i < MAX_PROCESSES; i++)
 canFinish[i] = false;
 int count = 0;
 while (count < MAX_PROCESSES) {
 bool found = false;
 for (int i = 0; i < MAX_PROCESSES; i++) {
 if (!finished[i] && canAllocate(i)) {

 allocateResources(i);
 canFinish[i] = true;
 safeSequence[count] = i;
 count++;
 found = true;
 }
 }
 if (!found)
 break;
 }
 if (count == MAX_PROCESSES) {
 printf("Safe Sequence: ");
 for (int i = 0; i < MAX_PROCESSES; i++)
 printf("%d ", safeSequence[i]);
 printf("\n");
 return true;
 } else {
 printf("No safe sequence exists.\n");
 return false;
 }
}
bool canSatisfyRequest(int process, int request[]) {
 for (int i = 0; i < MAX_RESOURCES; i++) {
 if (request[i] > need[process][i] || request[i] > available[i])
 return false;
 }
 return true;
}
int main() {
 printf("Enter the number of available resources:\n");
 for (int i = 0; i < MAX_RESOURCES; i++) {
 printf("Resource %d: ", i + 1);
 scanf("%d", &available[i]);
 }

 printf("\nEnter the maximum resource requirement for each process:\n");
 for (int i = 0; i < MAX_PROCESSES; i++) {
 printf("Process %d:\n", i + 1);
 for (int j = 0; j < MAX_RESOURCES; j++) {
 printf("Resource %d: ", j + 1);
 scanf("%d", &maximum[i][j]);
 need[i][j] = maximum[i][j];
 }
 }

 printf("\nEnter the initial allocation of resources for each process:\n");
 for (int i = 0; i < MAX_PROCESSES; i++) {
 printf("Process %d:\n", i + 1);
 for (int j = 0; j < MAX_RESOURCES; j++) {
 printf("Resource %d: ", j + 1);
 scanf("%d", &allocation[i][j]);
 need[i][j] -= allocation[i][j];
 available[j] -= allocation[i][j];
 }
 }
 int safeSequence[MAX_PROCESSES];
 if (findSafeSequence(safeSequence)) {
 int process;
 printf("\nEnter the process to request additional resources: ");
 scanf("%d", &process);
 int request[MAX_RESOURCES];
 printf("Enter the additional resource request:\n");
 for (int i = 0; i < MAX_RESOURCES; i++) {
 printf("Resource %d: ", i + 1);
 scanf("%d", &request[i]);
 }
 if (canSatisfyRequest(process, request)) {
 allocateResources(process);
 if (findSafeSequence(safeSequence))
 printf("Additional request can be satisfied. Safe sequence exists.\n");
 else
 printf("Additional request can be satisfied, but no safe sequence
exists.\n");
 freeResources(process);
 } else {
 printf("Additional request cannot be satisfied.\n");
 }
 }
 printf("This Code Has Been Sucessfully Run And Excecuted By Surindernath
Sivakumar 21BCE3474");
 return 0;
}
Output:







OPERATING SYSTEMS LAB
DIGITAL ASSIGNMENT 3
Name: Surindernath Sivakumar
Reg no: 21BCE3474
Question 1:
1. The dining philosopher's problem is the classical problem of synchronization which says that Five
philosophers are sitting around a circular table and their job is to think and eat alternatively. A bowl
of noodles is placed at the center of the table along with five chopsticks for each of the philosophers.
To eat a philosopher needs both their right and a left chopstick. A philosopher can only eat if both
immediate left and right chopsticks of the philosopher is available. In case if both immediate left and
right chopsticks of the philosopher are not available then the philosopher puts down their (either left
or right) chopstick and starts thinking again. Implement the dining philosopher’s problem for
establishing processes synchronization.
Code:
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#define NUM_PHILOSOPHERS 5
pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];
void *philosopher_action(void *arg) {
 int philosopher_index = *(int *)arg;
 int left_chopstick = philosopher_index;
 int right_chopstick = (philosopher_index + 1) % NUM_PHILOSOPHERS;
 while (1) {
 // Thinking
 printf("Philosopher %d is thinking.\n", philosopher_index);
 usleep(rand() % 2000000); // Sleep for a random period
 // Pick up chopsticks
 pthread_mutex_lock(&chopsticks[left_chopstick]);
 printf("Philosopher %d picked up left chopstick %d.\n", philosopher_index, left_chopstick);
 pthread_mutex_lock(&chopsticks[right_chopstick]);
 printf("Philosopher %d picked up right chopstick %d.\n", philosopher_index,
right_chopstick);
 // Eating
 printf("Philosopher %d is eating.\n", philosopher_index);
 usleep(rand() % 2000000); // Sleep for a random period
 // Put down chopsticks
 pthread_mutex_unlock(&chopsticks[left_chopstick]);
 printf("Philosopher %d put down left chopstick %d.\n", philosopher_index, left_chopstick);
 pthread_mutex_unlock(&chopsticks[right_chopstick]);
 printf("Philosopher %d put down right chopstick %d.\n", philosopher_index,
right_chopstick);
 }
}
int main() {
 cout<<“This code has been run and executed by Surindernath Sivakumar 21BCE3474”
 int i;
 // Initialize mutexes for chopsticks
 for (i = 0; i < NUM_PHILOSOPHERS; i++) {
 pthread_mutex_init(&chopsticks[i], NULL);
 }
 // Create philosopher threads
 for (i = 0; i < NUM_PHILOSOPHERS; i++) {
 int *philosopher_index = malloc(sizeof(int));
 *philosopher_index = i;
 pthread_create(&philosophers[i], NULL, philosopher_action, philosopher_index);
 }
 // Wait for philosopher threads to finish
 for (i = 0; i < NUM_PHILOSOPHERS; i++) {
 pthread_join(philosophers[i], NULL);
 }
 // Destroy mutexes
 for (i = 0; i < NUM_PHILOSOPHERS; i++) {
 pthread_mutex_destroy(&chopsticks[i]);
 }
 return 0;
}
Output 1:
Question 2:
1. The Producer-Consumer problem is a classic problem this is used for multiprocess synchronization i.e. synchronization between more than one
processes. In the producer- consumer problem, there is one Producer that is
producing something and there is one Consumer that is consuming the
products produced by the Producer. The producers and consumers share the
same memory buffer that is of fixed-size. The job of the Producer is to
generate the data, put it into the buffer, and again start generating data.
While the job of the Consumer is to consume the data from the buffer.
Implement the same using semaphores.
Code:
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#define BUFFER_SIZE 5
#define NUM_PRODUCERS 2
#define NUM_CONSUMERS 3
#define NUM_ITEMS 10
int buffer[BUFFER_SIZE];
int in = 0;
int out = 0;
sem_t empty;
sem_t full;
sem_t mutex;
void *producer(void *arg) {
 int producer_id = *(int *)arg;
 for (int i = 0; i < NUM_ITEMS; i++) {
 int item = rand() % 100;
 sem_wait(&empty);
 sem_wait(&mutex);

 buffer[in] = item;
 printf("Producer %d produced item %d\n", producer_id, item);
 in = (in + 1) % BUFFER_SIZE;
 sem_post(&mutex);
 sem_post(&full);

 usleep(rand() % 1000000);
 }
 pthread_exit(NULL);
}
void *consumer(void *arg) {
 int consumer_id = *(int *)arg;
 for (int i = 0; i < NUM_ITEMS; i++) {
 sem_wait(&full);
 sem_wait(&mutex);

 int item = buffer[out];
 printf("Consumer %d consumed item %d\n", consumer_id, item);
 out = (out + 1) % BUFFER_SIZE;
 sem_post(&mutex);
 sem_post(&empty);

 usleep(rand() % 1000000);
 }
 pthread_exit(NULL);
}
int main() {
 printf("This code was run and executed by Surindernath Sivakumar 21BCE3474")
 srand(time(NULL));
 sem_init(&empty, 0, BUFFER_SIZE);
 sem_init(&full, 0, 0);
 sem_init(&mutex, 0, 1);
 pthread_t producers[NUM_PRODUCERS];
 pthread_t consumers[NUM_CONSUMERS];
 int producer_ids[NUM_PRODUCERS];
 int consumer_ids[NUM_CONSUMERS];

 for (int i = 0; i < NUM_PRODUCERS; i++) {
 producer_ids[i] = i;
 pthread_create(&producers[i], NULL, producer, &producer_ids[i]);
 }

 for (int i = 0; i < NUM_CONSUMERS; i++) {
 consumer_ids[i] = i;
 pthread_create(&consumers[i], NULL, consumer, &consumer_ids[i]);
 }
 // Join producer threads
 for (int i = 0; i < NUM_PRODUCERS; i++) {
 pthread_join(producers[i], NULL);
 }

 for (int i = 0; i < NUM_CONSUMERS; i++) {
 pthread_join(consumers[i], NULL);
 }
 sem_destroy(&empty);
 sem_destroy(&full);
 sem_destroy(&mutex);
 return 0;
}
Output 2:
Question 3:
1. The critical section problem ensures that no two processes change or
modify a resource's value simultaneously. Implement the same using turn
and flag variables to ensure the Peterson solution.
Code:
#include <stdio.h>
#include <stdbool.h>
#include <pthread.h>
bool flag[2];
int turn = 0;
const int MAX_COUNT = 10;
void* process(void* arg) {
 int process_id = *(int*)arg;
 for (int count = 0; count < MAX_COUNT; count++) {

 flag[process_id] = true;
 turn = 1 - process_id;

 while (flag[1 - process_id] && turn == 1 - process_id);

 printf("Process %d entered critical section (Count: %d)\n", process_id, count);
 flag[process_id] = false;

 printf("Process %d performing non-critical work (Count: %d)\n", process_id, count);
 }
 pthread_exit(NULL);
}
int main() {
 pthread_t threads[2];
 int process_ids[2] = {0, 1};
 printf("This code was run and executed by Surindernath Sivakumar 21BCE3474\n");

 pthread_create(&threads[0], NULL, process, &process_ids[0]);
 pthread_create(&threads[1], NULL, process, &process_ids[1]);
 pthread_join(threads[0], NULL);
 pthread_join(threads[1], NULL);
 return 0;
}
Output 3:




Digital Assignment 5
Operating Systems Lab
Name: Surindernath Sivakumar
Reg No: 21BCE3474
Question 1:
Implement a logic to allocate memory by applying the following strategies.
a. FIRST FIT
b. BEST FIT
c. WORST FIT
Code:
a)
#include <stdio.h>
#define MAX_MEM_SIZE 1000
int mem_blocks[MAX_MEM_SIZE];
int block_status[MAX_MEM_SIZE];
void init_mem() {
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 mem_blocks[i] = 0;
 block_status[i] = 0;
 }
}
int first_fit(int size) {
 int start = -1;
 int cnt = 0;
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 if (block_status[i] == 0) {
 if (start == -1) {
 start = i;
 }
 cnt++;
 if (cnt == size) {
 return start;
 }
 } else {
 start = -1;
 cnt = 0;
 }
 }
 return -1;
}
void allocate(int size, int pid) {
 int start = first_fit(size);
 if (start == -1) {
 printf("Error: Not enough memory.\n");
 return;
 }
 for (int i = start; i < start+size; i++) {
 mem_blocks[i] = pid;
 block_status[i] = 1;
 }
 printf("Allocated %d blocks starting from index %d.\n", size, start);
}
void deallocate(int pid) {
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 if (mem_blocks[i] == pid) {
 mem_blocks[i] = 0;
 block_status[i] = 0;
 }
 }
 printf("Deallocated memory blocks for pid %d.\n", pid);
}
int main() {
 init_mem();
 allocate(10, 1);
 allocate(20, 2);
 allocate(15, 3);
 deallocate(2);
 allocate(5, 4);
 deallocate(1);
 allocate(30, 5);
 printf("This code was run and executed by Surindernath Sivakumar 21BCE3474");
 return 0;
}
b)
#include <stdio.h>
#define MAX_MEM_SIZE 1000
int mem_blocks[MAX_MEM_SIZE];
int block_status[MAX_MEM_SIZE];
void init_mem() {
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 mem_blocks[i] = 0;
 block_status[i] = 0;
 }
}
int best_fit(int size) {
 int start = -1;
 int min_size = MAX_MEM_SIZE + 1;
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 if (block_status[i] == 0) {
 int cnt = 0;
 while (block_status[i] == 0 && i < MAX_MEM_SIZE) {
 cnt++;
 i++;
 }
 if (cnt >= size && cnt < min_size) {
 min_size = cnt;
 start = i - cnt;
 }
 }
 }
 return start;
}
void allocate(int size, int pid) {
 int start = best_fit(size);
 if (start == -1) {
 printf("Error: Not enough memory.\n");
 return;
 }
 for (int i = start; i < start+size; i++) {
 mem_blocks[i] = pid;
 block_status[i] = 1;
 }
 printf("Allocated %d blocks starting from index %d.\n", size, start);
}
void deallocate(int pid) {
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 if (mem_blocks[i] == pid) {
 mem_blocks[i] = 0;
 block_status[i] = 0;
 }
 }
 printf("Deallocated memory blocks for pid %d.\n", pid);
}
int main() {
 init_mem();
 allocate(15, 1);
 allocate(5, 2);
 allocate(12, 3);
 deallocate(2);
 allocate(11, 4);
 deallocate(3);
 allocate(14, 5);
 printf("This code was run and executed by Surindernath Sivakumar 21BCE3474");
 return 0;
}
c)
#include <stdio.h>
#define MAX_MEM_SIZE 1000
int mem_blocks[MAX_MEM_SIZE];
int block_status[MAX_MEM_SIZE];
void init_mem() {
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 mem_blocks[i] = 0;
 block_status[i] = 0;
 }
}
int worst_fit(int size) {
 int start = -1;
 int max_size = -1;
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 if (block_status[i] == 0) {
 int cnt = 0;
 while (block_status[i] == 0 && i < MAX_MEM_SIZE) {
 cnt++;
 i++;
 }
 if (cnt >= size && cnt > max_size) {
 max_size = cnt;
 start = i - cnt;
 }
 }
 }
 return start;
}
void allocate(int size, int pid) {
 int start = worst_fit(size);
 if (start == -1) {
 printf("Error: Not enough memory.\n");
 return;
 }
 for (int i = start; i < start+size; i++) {
 mem_blocks[i] = pid;
 block_status[i] = 1;
 }
 printf("Allocated %d blocks starting from index %d.\n", size, start);
}
void deallocate(int pid) {
 for (int i = 0; i < MAX_MEM_SIZE; i++) {
 if (mem_blocks[i] == pid) {
 mem_blocks[i] = 0;
 block_status[i] = 0;
 }
 }
 printf("Deallocated memory blocks for pid %d.\n", pid);
}
int main() {
 init_mem();
 allocate(11, 1);
 allocate(23, 2);
 allocate(22, 3);
 deallocate(2);
 allocate(12, 4);
 deallocate(1);
 allocate(34, 5);
 printf("This code was run and executed by Surindernath Sivakumar 21BCE3474");
 return 0;
}
Output
a)
b)
c)
Question 2:
Develop the page replacement techniques for the following
a. FIFO
b. LRU
c. OPTIMAL
Code
a)
#include <stdio.h>
#include <stdbool.h>
#define MAX_FRAMES 3
int frames[MAX_FRAMES];
int frame_ptr = 0;
void print_frames() {
 for (int i = 0; i < MAX_FRAMES; i++) {
 if (frames[i] == -1) {
 printf("- ");
 } else {
 printf("%d ", frames[i]);
 }
 }
 printf("\n");
}
bool page_fault(int page) {
 for (int i = 0; i < MAX_FRAMES; i++) {
 if (frames[i] == page) {
 return false;
 }
 }
 frames[frame_ptr++] = page;
 if (frame_ptr == MAX_FRAMES) {
 frame_ptr = 0;
 }
 return true;
}
int main() {

 for (int i = 0; i < MAX_FRAMES; i++) {
 frames[i] = -1;
 }
 int pages[] = {1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5};
 int page_count = sizeof(pages) / sizeof(pages[0]);
 int page_faults = 0;
 for (int i = 0; i < page_count; i++) {
 printf("Page %d: ", pages[i]);
 if (page_fault(pages[i])) {
 page_faults++;
 printf("Page fault occurred. ");
 } else {
 printf("Page already in memory. ");
 }
 printf("Frames: ");
 print_frames();
 }
 printf("Total page faults: %d\n", page_faults);
 printf("This code was sucessfully run and executed by Surindernath Sivakumar 21BCE3474");
 return 0;
}
b)
#include <stdio.h>
#include <stdbool.h>
#define MAX_FRAMES 3
int frames[MAX_FRAMES];
int frame_ptr = 0;
int page_faults = 0;
void print_frames() {
 for (int i = 0; i < MAX_FRAMES; i++) {
 if (frames[i] == -1) {
 printf("- ");
 } else {
 printf("%d ", frames[i]);
 }
 }
 printf("\n");
}
bool page_fault(int page) {
 for (int i = 0; i < MAX_FRAMES; i++) {
 if (frames[i] == page) {
 return false;
 }
 }
 page_faults++;
 int lru_frame = 0;
 for (int i = 1; i < MAX_FRAMES; i++) {
 if (frames[i] < frames[lru_frame]) {
 lru_frame = i;
 }
 }
 frames[lru_frame] = page;
 return true;
}
int main() {
 for (int i = 0; i < MAX_FRAMES; i++) {
 frames[i] = -1;
 }
 int pages[] = {1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5};
 int page_count = sizeof(pages) / sizeof(pages[0]);
 for (int i = 0; i < page_count; i++) {
 printf("Page %d: ", pages[i]);
 if (page_fault(pages[i])) {
 printf("Page fault occurred. ");
 } else {
 printf("Page already in memory. ");
 }
 printf("Frames: ");
 print_frames();
 }
 printf("Total page faults: %d\n", page_faults);
 printf("This code was run and executed by Surindernath Sivakumar 21BCE3474");
 return 0;
}
c)
#include <stdio.h>
int main()
{
 int frames, pages, count = 0, hit = 0, fault = 0, flag1, flag2, pos, max, i, j, k;
 printf("Enter number of frames: ");
 scanf("%d", &frames);
 int frame[frames];
 printf("Enter number of pages: ");
 scanf("%d", &pages);
 int page[pages], future[pages];
 printf("Enter page reference string: ");
 for(i = 0; i < pages; i++)
 {
 scanf("%d", &page[i]);
 future[i] = -1;
 for(j = i + 1; j < pages; j++)
 {
 if(page[i] == page[j])
 {
 future[i] = j;
 break;
 }
 }
 }
 for(i = 0; i < frames; i++)
 {
 frame[i] = -1;
 }
 for(i = 0; i < pages; i++)
 {
 flag1 = flag2 = 0;
 for(j = 0; j < frames; j++)
 {
 if(frame[j] == page[i])
 {
 hit++;
 count++;
 flag1 = flag2 = 1;
 break;
 }
 }
 if(flag1 == 0)
 {
 for(j = 0; j < frames; j++)
 {
 if(frame[j] == -1)
 {
 fault++;
 count++;
 frame[j] = page[i];
 flag2 = 1;
 break;
 }
 }
 }
 if(flag2 == 0)
 {
 pos = -1;
 for(j = 0; j < frames; j++)
 {
 for(k = i + 1; k < pages; k++)
 {
 if(frame[j] == page[k])
 {
 if(future[k] == -1)
 {
 pos = j;
 break;
 }
 if(future[k] > max)
 {
 max = future[k];
 pos = j;
 }
 }
 }
 if(pos == -1)
 {
 pos = j;
 break;
 }
 }
 fault++;
 count++;
 frame[pos] = page[i];
 }
 printf("\n");
 for(j = 0; j < frames; j++)
 {
 printf("%d\t", frame[j]);
 }
 }
 printf("\n\nHits = %d\nFaults = %d\n", hit, fault);
 printf("\nPage Fault Rate = %0.2f%%\n", (float)fault / pages * 100);
 printf("Page Hit Rate = %0.2f%%\n", (float)hit / pages * 100);
 printf("This code has been successfully executed and run by Surindernath Sivakumar 21BCE3474");
 return 0;
}
Output Screenshot:
a)
b)
c)
Question 3:
Construct the reader-writer problem to verify multi-process synchronization and
ensure the mutual exclusion, progress and bounded waiting are maintained among the
readers and writers.
Code:
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define MAX_READERS 5
#define MAX_WRITERS 5
sem_t mutex, wrt;
int readers_count = 0;
void *writer(void *arg)
{
 int writer_id = *(int *)arg;
 while (1) {
 sem_wait(&wrt);
 printf("Writer %d is writing...\n", writer_id);
 sem_post(&wrt);
 sleep(1);
 }
}
void *reader(void *arg)
{
 int reader_id = *(int *)arg;
 while (1) {
 sem_wait(&mutex);
 readers_count++;
 if (readers_count == 1) {
 sem_wait(&wrt);
 }
 sem_post(&mutex);
 printf("Reader %d is reading...\n", reader_id);
 sem_wait(&mutex);
 readers_count--;
 if (readers_count == 0) {
 sem_post(&wrt);
 }
 sem_post(&mutex);

 sleep(1);
 }
}
int main()
{
 sem_init(&mutex, 0, 1);
 sem_init(&wrt, 0, 1);
 pthread_t readers[MAX_READERS], writers[MAX_WRITERS];
 int i, reader_id[MAX_READERS], writer_id[MAX_WRITERS];
 for (i = 0; i < MAX_READERS; i++) {
 reader_id[i] = i + 1;
 pthread_create(&readers[i], NULL, reader, &reader_id[i]);
 }
 for (i = 0; i < MAX_WRITERS; i++) {
 writer_id[i] = i + 1;
 pthread_create(&writers[i], NULL, writer, &writer_id[i]);
 }
 for (i = 0; i < MAX_READERS; i++) {
 pthread_join(readers[i], NULL);
 }
 for (i = 0; i < MAX_WRITERS; i++) {
 pthread_join(writers[i], NULL);
 }
 sem_destroy(&mutex);
 sem_destroy(&wrt);
 printf("This code has been run and executed by Surindernath Sivakumar 21BCE3474");
 return 0;
}
Output Screenshot:



DIGITAL ASSIGNMENT 6
OPERATING SYSTEMS LAB
NAME: SURINDERNATH SIVAKUMAR
REG NO: 21BCE3474
QUESTION 1:
Disk Scheduling Algorithms are used to reduce the total seek time of any request. Implement the
following disk scheduling algorithms with own inputs to compute the total seek time.
First Come-First Serve (FCFS)
Shortest Seek Time First (SSTF)
And give sample input and output
ANSWER 1:
CODE:
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int main()
{
 int n,head,i,j;
 float avg_seek_time=0;
 printf("Enter the number of requests: ");
 scanf("%d",&n);
 int queue[n];
 printf("Enter the position of head: ");
 scanf("%d",&head);
 printf("Enter the requests: ");
 for(i=0;i<n;i++)
 {
 scanf("%d",&queue[i]);
 }
 printf("Processing order: ");
 for(i=0;i<n;i++)
 {
 printf("%d ",queue[i]);
 avg_seek_time+=abs(head-queue[i]);
 head=queue[i];
 }
 printf("\nAverage seek time: %f",avg_seek_time/n);
 printf("\nThis code was sucessfully run and executed by Surindernath Sivakumar 21BCE3474");
 return 0;
}
OUTPUT:
CODE:
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int minDistance(int queue[], int n, int head)
{
 int min = abs(queue[0] - head);
 int index = 0;
 for (int i = 1; i < n; i++)
 {
 if (abs(queue[i] - head) < min)
 {
 min = abs(queue[i] - head);
 index = i;
 }
 }
 return index;
}
int main()
{
 int n,head,i,j;
 float avg_seek_time=0;
 printf("Enter the number of requests: ");
 scanf("%d",&n);
 int queue[n];
 printf("Enter the position of head: ");
 scanf("%d",&head);
 printf("Enter the requests: ");
 for(i=0;i<n;i++)
 {
 scanf("%d",&queue[i]);
 }
 printf("Processing order: %d ",head);
 for(i=0;i<n;i++)
 {
 int index = minDistance(queue, n, head);
 printf("%d ",queue[index]);
 avg_seek_time += abs(head - queue[index]);
 head = queue[index];
 queue[index] = INT_MAX;
 }
 printf("\nAverage seek time: %f",avg_seek_time/n);
 printf("\n This code was successfully run and executed by Surindernath Sivakumar 21BCE3474");
 return 0;
}
OUTPUT:


