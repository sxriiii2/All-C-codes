Digital Assignment 3 DAA LAB
Name: Surindernath Sivakumar
Reg.No: 21BCE3474
1. N Queens Problem
Code:
#include <stdio.h>
int queen(int R, int n, int N, int Board[6][6]) {
if (n==0)
return 1;
int J;
for (J=1; J<=N; J++) {
if(!sui(R, J, Board, N)) {
Board[R][J] = 1;
if (queen(R+1, n-1, N, Board))
return 1;
Board[R][J] = 0;
}
int sui(int I, int J, int Board[6][6], int N) {
int a, b;
for(a=1; a<=I-1; a++) {
if(Board[a][J] == 1)
return 1;
}
a = I-1;
b = J+1;
while (a>=1 && b<=N) {
if (Board[a][b] == 1)
return 1;
a=a+1;
b=b+1;
}
a = I-1;
b = J-1;
while (a>=1 && b>=1) {
if (Board[a][b] == 1)
return 1;
a=a-1;
b=b-1;
}
return 0;
}
}
return 0;
}
int main() {
int Board[6][6];
int I, J;
for(I=0;I<=5;I++) {
for(J=0;J<=5;J++)
Board[I][J] = 0;
}
queen(1, 5, 5, Board);
for(I=1;I<=5;I++) {
for(J=1;J<=5;J++){
if(Board[I][J]==0){
printf(" x ");
}
if(Board[I][J]==1){
printf(" Q ");
}
}
printf("\n");
}
return 0;
}
Output Screenshot:
2. Maximum Subarray
Code:
#include<stdio.h>
int maxsub(int arr[], int N){
if (N<1){
return 0;
}
int Sub1=arr[0];
int Sub2=arr[0];
for (int i=1; i<N; ++i){
if (Sub1<0){
Sub1=arr[i];
}
else{
Sub1+=arr[i];
}
if (Sub2<Sub1){
Sub2=Sub1;
}
}
return Sub2;
}
int main(){
int result[]={5,6,-7,-9,-8,2,-3,-5,7,-8};
printf("Sum of largest subarray:%d ",maxsub(result, sizeof(result)/sizeof(result[0])));
printf("\n");
printf("This code is executed by Surindernath Sivakumar 21BCE3474");
return 0;
}
Output Screenshot:



DIGITAL ASSIGNMENT 7
Name: Surindernath Sivakumar
Reg No: 21BCE3474
QUESTION 1:
Code:
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int Naive(char a[], char b[], int N, int M){
int A=0;
for(int i=0;i<N;i++){
int j=0;
if(a[i]==b[j]){
char c[M];
int s=0;
for(int k=i;k<i+M;k++){
c[s]=a[k];
s++;
}
for(int L=0;L<M;L++){
if(c[L]==b[L]){
A=i;
}
else{
A=0;
break;
}
}
}
}
if(A==0){
return(-1);
}
else{
return(A);
}
}
int main(){
int N;
int M;
printf("Size of the main string is : ");
scanf("%d",&N);
printf("Input the main string : ");
char a[N];
scanf("%s",&a);
printf("Size of the Substring to be found : ");
scanf("%d",&M);
char b[M];
printf("Enter the Substring : ");
scanf("%s",&b);
int k=Naive(a,b,N,M);
if(k==-1){
printf("String has not been found");
}
else{
printf("String has been found in position : %d",k);
}
}
Output Screenshot:
Question 2:
Code:
#include <stdio.h>
#include <string.h>
void rabinKarp(char sub[], char Main[], int q) {
int M1 = strlen(sub);
int N = strlen(Main);
int count=0;
int i, j;
int S = 0;
int M = 0;
int H = 1;
for (i = 0; i <= N - M1; i++) {
if (S == M) {
count++;
for (j = 0; j < M1; j++) {
if (Main[i + j] != sub[j])
break;
}
if (j == M1){
printf("Pattern is found at position: %d \n", i);
}
}
if (i < N - M1) {
M = (10 * (M - Main[i] * H) + Main[i + M1]) % q;
if (M < 0)
M = (M + q);
}
}
for (i = 0; i < M1 - 1; i++)
H = (H * 10) % q;
for (i = 0; i < M1; i++) {
S = (10 * S + sub[i]) % q;
M = (10 * M + Main[i]) % q;
}
printf("Spurious hits: %d",count);
}
int main() {
char Main[] = "2359023141526739921";
char sub[] = "31415";
int q = 10;
rabinKarp(sub, Main, q);
return 0;
}
Output Screenshot:



LAB ASSIGNMENT 6
Name: Surindernath Sivakumar
Reg no: 21BCE3474
Question 1: Ford Fulkerson
Code:
#include <iostream>
#include <limits.h>
#include <queue>
#include <string.h>
using namespace std;
#define V 6
bool BFS(int RG[V][V], int s, int t, int p[]){
bool visit[V];
memset(visit, 0, sizeof(visit));
queue<int> q;
q.push(s);
visit[s] = true;
p[s] = -1;
while (!q.empty()) {
int u = q.front();
q.pop();
for (int v = 0; v < V; v++) {
if (visit[v] == false && RG[u][v] > 0) {
if (v == t) {
p[v] = u;
return true;
}
q.push(v);
p[v] = u;
visit[v] = true;
}
}
}
return false;
}
int FF(int g[V][V], int s, int t){
int u, v;
int RG[V]
[V];
for (u = 0; u < V; u++)
for (v = 0; v < V; v++)
RG[u][v] = g[u][v];
int p[V];
int max_flow = 0;
while (BFS(RG, s, t, p)) {
int pf = INT_MAX;
for (v = t; v != s; v = p[v]) {
u = p[v];
pf = min(pf, RG[u][v]);
}
for (v = t; v != s; v = p[v]) {
u = p[v];
RG[u][v] -= pf;
RG[v][u] += pf;
}
max_flow += pf;
}
return max_flow;
}
int main(){
int g[V][V]
= { { 0, 16, 13, 0, 0, 0 }, { 0, 0, 10, 12, 0, 0 },
{ 0, 4, 0, 0, 14, 0 }, { 0, 0, 9, 0, 0, 20 },
{ 0, 0, 0, 7, 0, 4 }, { 0, 0, 0, 0, 0, 0 } };
cout << "Maximum Flow Of Graph Is: "
<< FF(g, 0, 5);
return 0;
}
Output Screenshot:
Question 2: Edmond karp
Code: #include<cstdio>
#include<queue>
#include<cstring>
#include<vector>
#include<iostream>
using namespace std;
int c[10][10];
int flowPassed[10][10];
vector<int> g[10];
int parList[10];
int cpc[10];
int bfs(int sNode, int eNode)
{
memset(parList, -1, sizeof(parList));
memset(cpc, 0, sizeof(cpc));
queue<int> q;
q.push(sNode);
parList[sNode] = -1;
cpc[sNode] = 999;
while(!q.empty())
{
int CurrentNode = q.front();
q.pop();
for(int i=0; i<g[CurrentNode].size(); i++)
{
int to = g[CurrentNode][i];
if(parList[to] == -1)
{
if(c[CurrentNode][to] - flowPassed[CurrentNode][to] > 0)
{
parList[to] = CurrentNode;
cpc[to] = min(cpc[CurrentNode],
c[CurrentNode][to] - flowPassed[CurrentNode][to]);
if(to == eNode)
{
return cpc[eNode];
}
q.push(to);
}
}
}
}
return 0;
}
int EK(int sNode, int eNode)
{
int MF = 0;
while(true)
{
int F = bfs(sNode, eNode);
if (F == 0)
{
break;
}
MF += F;
int CurrentNode = eNode;
while(CurrentNode != sNode)
{
int PreviousNode = parList[CurrentNode];
flowPassed[PreviousNode][CurrentNode] += F;
flowPassed[CurrentNode][PreviousNode] -= F;
CurrentNode = PreviousNode;
}
}
return MF;
}
int main()
{
int NC, EC;
cout<<"Enter Number of Nodes And Edges\n";
cin>>NC>>EC;
int source, sink;
cout<<"Source And Sink Value\n";
cin>>source>>sink;
for(int ed = 0; ed < EC; ed++)
{
cout<<"Start And End Of Vertex\n";
int from, to, cap;
cin>>from>>to>>cap;
c[from][to] = cap;
g[from].push_back(to);
g[to].push_back(from);
}
int MF = EK(source, sink);
cout<<endl<<endl<<"Max Flow is:"<<MF<<endl;
}
Output Screenshot:



Design And Analysis Of Algorithm Lab 8
Name: Surindernath Sivakumar Reg No: 21BCE3474 8a)
Question: Given a string X formed out of single digit numbers from 0−9, you are given a set of
digits P(pattern) and you need to find the pattern matching using Knuth Morris Pratt
algorithm.
Input Format First line contains a string X as input. Next line contains a number n as input denoting size of pattern P. Next line contains n space separated integers that denote the distinct integers in
the pattern P.
Answer: Code:
#include <iostream>
#include <cstring>
using namespace std;
void computeLPSArray(char* pat, int m, int* lps) {
int len = 0;
lps[0] = 0;
int i = 1;
while (i < m) {
if (pat[i] == pat[len]) {
len++;
lps[i] = len;
i++;
}
else if (len != 0) {
len = lps[len - 1];
}
else {
lps[i] = 0;
i++;
}
}
}
void KMPSearch(char* pat, char* txt) {
int m = strlen(pat);
int n = strlen(txt);
int lps[m];
computeLPSArray(pat, m, lps);
int i = 0, j = 0;
while ((n - i) >= (m - j)) {
if (pat[j] == txt[i]) {
j++;
i++;
}
if (j == m) {
printf("Found pattern at index %d ", i - j);
j = lps[j - 1];
}
else if (i < n && pat[j] != txt[i]) {
if (j != 0)
j = lps[j - 1];
else
i = i + 1;
}
}
}
int main() {
char txt[] = "010203023343534";
char pat[] = "334";
KMPSearch(pat, txt);
return 0;
} Output:
8b)
Question: Given n line segments (p1, q1), (p2, q2), … (pn, qn), find the number of line segments
intersection for the given input lines.
Input Format First line contains an integer value n denoting the number of lines. Next line contains the starting and ending points of all n lines.
Output Format
Display the number of intersections
Code:
#include <iostream>
#include <vector>
#include <set>
using namespace std;
struct Point { int x, y; };
struct Segment { Point p, q; };
bool intersect(Segment s1, Segment s2) {
if (r.x <= max(s.p.x, s.q.x) && r.x >= min(s.p.x, s.q.x) &&
r.y <= max(s.p.y, s.q.y) && r.y >= min(s.p.y, s.q.y)) {
return true;
}
return false;
}
int countIntersections(vector<Segment>& segs) {
int o1 = orientation(s1.p, s1.q, s2.p);
int o2 = orientation(s1.p, s1.q, s2.q);
int o3 = orientation(s2.p, s2.q, s1.p);
int o4 = orientation(s2.p, s2.q, s1.q);
if (o1 != o2 && o3 != o4)
return true;
if (o1 == 0 && onSegment(s1, s2.p)) return true;
if (o2 == 0 && onSegment(s1, s2.q)) return true;
if (o3 == 0 && onSegment(s2, s1.p)) return true;
if (o4 == 0 && onSegment(s2, s1.q)) return true;
return false;
int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
if (val == 0) return 0;
return (val > 0) ? 1 : 2;
int n = segs.size();
int count = 0;
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
if (doIntersect(segs[i], segs[j])) {
count++;
}
}
}
return count;
}
int main() {
vector<Segment> segs = {{{1, 5}, {4, 5}}, {{2, 5}, {10, 1}},{{3, 2}, {10, 3}},{{6, 4}, {9, 4}},{{7, 1}, {8, 1}}};
cout << "Intersections: " << countIntersections(segs) << '\n';
return 0;
} Output: 9) Question:
Convex Hull of a set of points, in 2D plane, is a convex polygon with minimum area such
that each point lies either on the boundary of polygon or inside it.
Given a set of N points, Find the list of point that form the vertex of the convex hull for
the points. (using Graham Scan Algorithm)
Input Format First line of input will contain a integer, N, number of points. Then follow N lines where each line contains the coordinate, xi yi, of i
th point.
Output Format
Print the list of point that form the vertex of the convex hull for the points.
Code:
#include <iostream>
#include <vector>
struct Point{
int x, y;
};
int orientation(Point p, Point q, Point r){
int val = (q.y - p.y) * (r.x - q.x) -
(q.x - p.x) * (r.y - q.y);
if (val == 0) return 0;
return (val > 0)? 1: 2;
}
void convexHull(Point points[], int n)
{
if (n < 3) return;
std::vector<Point> hull;
int l = 0;
for (int i = 1; i < n; i++)
if (points[i].x < points[l].x)
l = i;
int p = l, q;
do
{
hull.push_back(points[p]);
q = (p+1)%n;
for (int i = 0; i < n; i++)
{
if (orientation(points[p], points[i], points[q]) == 2)
q = i;
}
p = q;
} while (p != l);
for (Point p : hull)
std::cout << "(" << p.x << ", "
<< p.y << ")\n";
}
int main()
{
Point points[] = {{1, 3}, {1, 2}, {4, 1}, {2, 5},
{3, 1}, {2, 0}, {3, 2}};
int n = sizeof(points)/sizeof(points[0]);
convexHull(points, n);
return 0;
} Output:




LAB CAT 1
Name: Surindernath Sivakumar
Reg No: 21BCE3474
Question:
. Compute the product of 1234 and 5678 using karastuba’s fast multiplication Algorithm.
Code:
#include<iostream>
#include <bits/stdc++.h>
using namespace std;
string findSum(string str1, string str2)
{
if (str1.length() > str2.length())
swap(str1, str2);
string str = "";
int n1 = str1.length();
int n2 = str2.length();
reverse(str1.begin(), str1.end());
reverse(str2.begin(), str2.end());
int carry = 0;
for (int i = 0; i < n1; i++) {
int sum
= ((str1[i] - '0')
+ (str2[i] - '0')
+ carry);
str.push_back(sum % 10 + '0');
carry = sum / 10;
}
for (int i = n1; i < n2; i++) {
int sum = ((str2[i] - '0') + carry);
str.push_back(sum % 10 + '0');
carry = sum / 10;
}
if (carry)
str.push_back(carry + '0');
reverse(str.begin(), str.end());
return str;
}
string findDiff(string str1, string str2)
{
string str = "";
int n1 = str1.length(), n2 = str2.length();
reverse(str1.begin(), str1.end());
reverse(str2.begin(), str2.end());
int carry = 0;
for (int i = 0; i < n2; i++) {
int sub
= ((str1[i] - '0')
- (str2[i] - '0')
- carry);
if (sub < 0) {
sub = sub + 10;
carry = 1;
}
else
carry = 0;
str.push_back(sub + '0');
}
for (int i = n2; i < n1; i++) {
int sub = ((str1[i] - '0') - carry);
if (sub < 0) {
sub = sub + 10;
carry = 1;
}
else
carry = 0;
str.push_back(sub + '0');
}
reverse(str.begin(), str.end());
return str;
}
string multiply(string A, string B)
{
if (A.length() > B.length())
swap(A, B);
int n1 = A.length(), n2 = B.length();
while (n2 > n1) {
A = "0" + A;
n1++;
}
if (n1 % 2 == 1) {
n1++;
A = "0" + A;
B = "0" + B;
}
string Al, Ar, Bl, Br;
for (int i = 0; i < n1 / 2; ++i) {
Al += A[i];
Bl += B[i];
Ar += A[n1 / 2 + i];
Br += B[n1 / 2 + i];
}
string p = multiply(Al, Bl);
string q = multiply(Ar, Br);
string r = findDiff(
multiply(findSum(Al, Ar),
findSum(Bl, Br)),
findSum(p, q));
for (int i = 0; i < n1; ++i)
p = p + "0";
for (int i = 0; i < n1 / 2; ++i)
r = r + "0";
string ans = findSum(p, findSum(q, r));
return ans;
cout<<ans;
}
int main()
{
string A = "1234";
string B = "5678";
cout << multiply(A, B);
return 0;
}
Output Screenshot:
