1. Develop a working model and Construct an AVL tree with suitable rotations
for the dictionary words given below. Perform the following operations,
Insert : {jar, fan, gal, ham, pad, ice, cab, bag, abs}
Delete: {ham, bag}
Insert: {van, tag, zee}
Delete: {jar, fan}


2. Implement the program to perform the heap sort of elements in
increasing/decreasing order by constructing a heap with the proper element at
the root using top-down and bottom-up approaches. (Assume own inputs)

Question 1:

Answer 1:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// AVL tree node
struct Node {
    char data[20];
    struct Node *left;
    struct Node *right;
    int height;
};

// Function to get the height of a node
int height(struct Node *node) {
    if (node == NULL) {
        return 0;
    }
    return node->height;
}

// Function to get the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to create a new node
struct Node *newNode(char *data) {
    struct Node *node = (struct Node*)malloc(sizeof(struct Node));
    strcpy(node->data, data);
    node->left = NULL;
    node->right = NULL;
    node->height = 1;
    return node;
}

// Function to perform a right rotation
struct Node *rightRotate(struct Node *y) {
    struct Node *x = y->left;
    struct Node *T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    return x;
}

// Function to perform a left rotation
struct Node *leftRotate(struct Node *x) {
    struct Node *y = x->right;
    struct Node *T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    return y;
}

// Function to get the balance factor of a node
int getBalance(struct Node *node) {
    if (node == NULL) {
        return 0;
    }
    return height(node->left) - height(node->right);
}

// Function to insert a node into the AVL tree
struct Node *insert(struct Node *node, char *data) {
    if (node == NULL) {
        return newNode(data);
    }

    if (strcmp(data, node->data) < 0) {
        node->left = insert(node->left, data);
    } else if (strcmp(data, node->data) > 0) {
        node->right = insert(node->right, data);
    } else {
        // Duplicate keys are not allowed
        return node;
    }

    node->height = 1 + max(height(node->left), height(node->right));

    int balance = getBalance(node);

    // Left Left Case
    if (balance > 1 && strcmp(data, node->left->data) < 0) {
        return rightRotate(node);
    }

    // Right Right Case
    if (balance < -1 && strcmp(data, node->right->data) > 0) {
        return leftRotate(node);
    }

    // Left Right Case
    if (balance > 1 && strcmp(data, node->left->data) > 0) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left Case
    if (balance < -1 && strcmp(data, node->right->data) < 0) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

// Function to find the node with the minimum value in a tree
struct Node *minValueNode(struct Node *node) {
    struct Node *current = node;

    while (current->left != NULL) {
        current = current->left;
    }

    return current;
}

// Function to delete a node from the AVL tree
struct Node *deleteNode(struct Node *root, char *data) {
    if (root == NULL) {
        return root;
    }

    if (strcmp(data, root->data) < 0) {
        root->left = deleteNode(root->left, data);
    } else if (strcmp(data, root->data) > 0) {
        root->right = deleteNode(root->right, data);
    } else {
        if ((root->left == NULL) || (root->right == NULL)) {
            struct Node *temp = root->left ? root->left : root->right;

            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else {
                *root = *temp;
            }

            free(temp);
        } else {
            struct Node *temp = minValueNode(root->right);

            strcpy(root->data, temp->data);

            root->right = deleteNode(root->right, temp->data);
        }
    }

    if (root == NULL) {
        return root;
    }

    root->height = 1 + max(height(root->left), height(root->right));

    int balance = getBalance(root);

    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0) {
        return rightRotate(root);
    }

    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0) {
        return leftRotate(root);
    }

    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Function to print the AVL tree in in-order traversal
void inOrder(struct Node *root) {
    if (root != NULL) {
        inOrder(root->left);
        printf("%s ", root->data);
        inOrder(root->right);
    }
}

// Main function
int main() {
    struct Node *root = NULL;

    // Insert the initial words
    root = insert(root, "jar");
    root = insert(root, "fan");
    root = insert(root, "gal");
    root = insert(root, "ham");
    root = insert(root, "pad");
    root = insert(root, "ice");
    root = insert(root, "cab");
    root = insert(root, "bag");
    root = insert(root, "abs");

    // Print the AVL tree
    printf("AVL tree after initial insertions:\n");
    inOrder(root);
    printf("\n\n");

    // Delete "ham" and "bag"
    root = deleteNode(root, "ham");
    root = deleteNode(root, "bag");

    // Print the AVL tree
    printf("AVL tree after deleting 'ham' and 'bag':\n");
    inOrder(root);
    printf("\n\n");

    // Insert "van" and "tag"
    root = insert(root, "van");
    root = insert(root, "tag");

    // Print the AVL tree
    printf("AVL tree after inserting 'van' and 'tag':\n");
    inOrder(root);
    printf("\n\n");

    // Delete "jar" and "fan"
    root = deleteNode(root, "jar");
    root = deleteNode(root, "fan");

    // Print the AVL tree
    printf("AVL tree after deleting 'jar' and 'fan':\n");
    inOrder(root);
    printf("\n\n");

    return 0;
}




Question 2:
Code:
#include <iostream>
using namespace std;
void heapifybig(int *x, int index, int numberofelements){
int j, temp;
temp = x[index];
j = 2 * index;
while (j <= numberofelements){
if (j < numberofelements && x[j+1] > x[j]){
j = j + 1;
}
if (temp > x[j]){
break;
}
else if (temp <= x[j]){
x[j / 2] = x[j];
j = 2 * j;
}
}
x[j/2] = temp;
return;
}
void maxheapsort(int *x,int numberofelements){
int index;
for(index = numberofelements/2; index >= 1; index--){
heapifybig(x,index,numberofelements);
}
}
void heapifysmall(int *x,int index,int numberofelements){
int j, temp;
temp = x[index];
j = 2 * index;
while (j <= numberofelements){
if (j < numberofelements && x[j+1] < x[j]){
j = j + 1;
}
if (temp < x[j]){
break;
}
else if (temp >= x[j]){
x[j/2] = x[j];
j = 2 * j;
}
}
x[j/2] = temp;
return;
}
void minheapsort(int *x, int numberofelements){
int index;
for(index = numberofelements/2; index >= 1; index--){
heapifysmall(x,index,numberofelements);
}
}
int main(){
int numberofelements, index, h;
cout<<"Enter The Number Of Elements You Wish To Heapify : \n";
cin>>numberofelements;
int x[20];
for (index = 1; index <= numberofelements; index++){
cout<<"Enter The Element Number "<<(index)<<" : "<<endl;
cin>>x[index];
}
maxheapsort(x,numberofelements);
cout<<"After Applying Max Heap : \n";
for (index = 1; index <= numberofelements; index++){
cout<<x[index]<<endl;
}
minheapsort(x, numberofelements);
cout<<"After Applying Min Heap : \n";
for (index = 1; index <= numberofelements; index++){
cout<<x[index]<<endl;
}
cout<<"This Code Was Successfuly Run And Excecuted By Surindernath Sivakumar 21BCE3474";
}
Output Screenshot:



