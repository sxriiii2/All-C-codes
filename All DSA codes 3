


Question 1: Implement various sorting techniques (selection,bubble and insertion) to sort
the numeric and string.
a) Check with correct and incorrect input cases
b) Check the cases if input values are equal or duplicate
Code:
#include<iostream>
#include<string.h>
#include<bits/stdc++.h>
using namespace std;
void output(int a1[], int n){
cout<<"\n";
cout<<"``` ";
for(int i=0;i<n;i++){
cout<<a1[i]<<" ";
}
cout<<"```";
cout<<" \n";
cout<<" \n";
}
void output(string a1[], int n){
cout<<" \n";
cout<<"``` ";
for(int i=0;i<n-1;i++){
cout<<a1[i]<<" ,";
}
cout<<a1[n-1];
cout<<" ```";
cout<<" \n";
cout<<" \n";
}
void selectionsorting(int a1[],int n){
for(int i=0;i<n-1;i++){
int minimum=a1[i];
for(int j=i;j<n;j++){
if(minimum>a1[j]){
int temp=a1[i];
a1[i]=a1[j];
a1[j]=temp;
}
}
}
output(a1,n);
}
void selectionsorting(string a1[],int n){
for(int i=0;i<n-1;i++){
string minimum=a1[i];
for(int j=i;j<n;j++){
if(minimum.compare(a1[j])>0){
string temp=a1[i];
a1[i]=a1[j];
a1[j]=temp;
}
}
}
output(a1,n);
}
void bubblesorting(int a1[], int n){
for(int i=0;i<n;i++){
int temp;
for(int j=0;j<i;j++){
if(a1[j]>a1[i]){
temp=a1[j];
a1[j]=a1[i];
a1[i]=temp;
}
}
}
output(a1,n);
}
void bubblesorting(string a1[], int n){
for(int i=0;i<n;i++){
string temp;
for(int j=0;j<i;j++){
if(a1[j].compare(a1[i])>0){
temp=a1[j];
a1[j]=a1[i];
a1[i]=temp;
}
}
}
output(a1,n);
}
void insertionsorting(int a1[],int n){
int i,j,temp;
for(i=1;i<n;i++){
temp=a1[i];
j=i-1;
while(j>=0 && temp<=a1[j]){
a1[j+1]=a1[j];
j=j-1;
}
a1[j+1]=temp;
}
output(a1,n);
}
void insertionsorting(string a1[],int n){
int i,j;
string temp;
for(i=1;i<n;i++){
temp=a1[i];
j=i-1;
while(j>=0 && temp<=a1[j]){
a1[j+1]=a1[j];
j=j-1;
}
a1[j+1]=temp;
}
output(a1,n);
}
void Creatingarrayofstrings(string a1[],int n){
cout<<"Enter the strings you wish to get sorted\n";
int i=0;
while(i<n){
int q=1;
string xqc;
cin>>xqc;
while(q!=0){
for(int o=0;o<xqc.length();o++){
if((xqc[o]>=48 && xqc[o]<=57)|| (xqc[o]>=65 && xqc[o]<=90)|| (xqc[o]>=97 && xqc[o]<=122)){
q=0;
}
else{
q=1;
break;
}
}
if(q==1){
cout<<"No special characters are permitted\n";
cin>>xqc;
}
}
a1[i]=xqc;
i++;
}
}
void Creatingarrayofintegers(int a1[],int n){
cout<<"Enter the integers you wish to get sorted\n";
int i=0;
while(i<n){
int xqc;
cin>>xqc;
a1[i]=xqc;
i++;
}
}
int main(){
int n;
int firstchoice=1;
while(firstchoice!=0){
cout<<"1.Create an array of integers\n";
cout<<"2.Create an array of strings\n";
cout<<"0.exit the programme\n";
cin>>firstchoice;
if(firstchoice==1){
cout<<"Enter number of integers to be inputted\n";
cin>>n;
int a1[n];
Creatingarrayofintegers(a1,n);
output(a1,n);
int secondchoice=1;
while(secondchoice!=0){
cout<<"Enter your choice\n";
cout<<"1. Bubble sort\n";
cout<<"2. Selection sort\n";
cout<<"3. Insertion sort\n";
cout<<"0. exit the programme\n";
cin>>secondchoice;
if(secondchoice==1){
bubblesorting(a1,n);
}
else if(secondchoice==2){
selectionsorting(a1,n);
}
else if(secondchoice==3){
insertionsorting(a1,n);
}
else if(secondchoice==0){
cout<<"Return back to main choices\n";
cout<<"--------------------\n";
cout<<"\n";
}
}
}
else if(firstchoice==2){
cout<<"Enter number of strings to be inputted\n";
cin>>n;
string a1[n];
Creatingarrayofstrings(a1,n);
output(a1,n);
int secondchoice=1;
while(secondchoice!=0){
cout<<"Enter your choice\n";
cout<<"1. Bubble sort\n";
cout<<"2. Selection sort\n";
cout<<"3. Insertion sort\n";
cout<<"0. Exit\n";
cin>>secondchoice;
if(secondchoice==1){
bubblesorting(a1,n);
}
else if(secondchoice==2){
selectionsorting(a1,n);
}
else if(secondchoice==3){
insertionsorting(a1,n);
}
else if(secondchoice==0){
cout<<"Return back to main choices\n";
cout<<"--------------------\n";
cout<<"\n";
}
}
}
else if(firstchoice==0){
cout<<"Exited the programme\n";
}
}
cout<<" This programme was executed by Surindernath Sivakumar 21BCE3474 \n";
}






Q2.
Implement the merge sort technique that performs sorting on numeric as well as character/string.
a. Check with sorted inputs
b. Check the cases if input values are equal or duplicate
c. Check the input and its reversed cases performance
Code:
#include<iostream>
#include<string.h>
using namespace std;
void mergesortstring(string a1[], int left,int middle,int right){
int a;
int b;
int c;
int leftend=middle-left+1;
int rightend=right-middle;
string leftarray[leftend];
string rightarray[rightend];
for(a=0;a<leftend;a++){
leftarray[a]=a1[a+left];
}
for(b=0;b<rightend;b++){
rightarray[b]=a1[middle+b+1];
}
a=0;
b=0;
c=left;
while(a<leftend &&b<rightend){
if(leftarray[a].compare(rightarray[b])<0){
a1[c]=leftarray[a];
a++;
}
else{
a1[c]=rightarray[b];
b++;
}
c++;
}
while(a<leftend){
a1[c]=leftarray[a];
a++;
c++;
}
while(b<rightend){
a1[c]=rightarray[b];
b++;
c++;
}
}
void mergeSortstr(string a1[],int left,int right){
if(left<right){
int middle=(left+right)/2;
mergeSortstr(a1,left,middle);
mergeSortstr(a1,middle+1,right);
mergesortstring(a1,left,middle,right);
}
}
void mergesortinteger(int a1[], int left,int middle,int right){
int a;
int b;
int c;
int leftend=middle-left+1;
int rightend=right-middle;
int leftarray[leftend];
int rightarray[rightend];
for(a=0;a<leftend;a++){
leftarray[a]=a1[a+left];
}
for(b=0;b<rightend;b++){
rightarray[b]=a1[middle+b+1];
}
a=0;
b=0;
c=left;
while(a<leftend &&b<rightend){
if(leftarray[a]<rightarray[b]){
a1[c]=leftarray[a];
a++;
}
else{
a1[c]=rightarray[b];
b++;
}
c++;
}
while(a<leftend){
a1[c]=leftarray[a];
a++;
c++;
}
while(b<rightend){
a1[c]=rightarray[b];
b++;
c++;
}
}
void mergesorting(int a1[],int left,int right){
if(left<right){
int middle=(left+right)/2;
mergesorting(a1,left,middle);
mergesorting(a1,middle+1,right);
mergesortinteger(a1,left,middle,right);
}
}
int main(){
int ch=1;
int a1[5]={50,40,30,20,10};
for(int a=0;a<5;a++){
cout<<a1[a]<<" ";
}
cout<<"\n";
cout<<"Executing Merge Sort.........: \n";
mergesorting(a1,0,4);
cout<<"\n";
cout<<"```";
for(int a=0;a<5;a++){
cout<<a1[a]<<" ";
}
cout<<"```";
cout<<"\n";
string a2[5]={"abch","abcg","abcf","abce","abcd"};
for(int a=0;a<5;a++){
cout<<a2[a]<<" ";
}
cout<<"\n";
cout<<"Executing Merge Sort.........: \n";
mergeSortstr(a2,0,4);
cout<<"\n";
cout<<"```";
for(int a=0;a<5;a++){
cout<<a2[a]<<" ";
}
cout<<"```";
cout<<"\n";
cout<<"This code is executed by Surindernath Sivakumar";
}
Output:
1)Sorted inputs
2) check if values are duplicate



Q3.
Implement the quick sort technique that performs sorting on numeric as well as Character/string.
a) Check with sorted inputs
b) Check the cases if input values are equal or duplicate
c) Check the input and its reversed cases performance
Code:
#include<iostream>
#include<string.h>
using namespace std;
int splitting(string a1[],int h,int l){
string g=a1[l];
int i=h-1;
for(int j=h;j<=l;j++){
if(g.compare(a1[j])>0){
i++;
string temp1=a1[i];
a1[i]=a1[j];
a1[j]=temp1;
}
}
string temp2=a1[l];
a1[l]=a1[i+1];
a1[i+1]=temp2;
return(i+1);
}
void quicksortingstring(string a1[],int h,int l){
if(h<l){
int part=splitting(a1,h,l);
quicksortingstring(a1,h,part -1);
quicksortingstring(a1,part +1,l);
}
}
int splitting(int a1[], int h, int l){
int g=a1[l];
int i=h-1;
for(int j=h;j<=l;j++){
if(a1[j]<g){
i++;
int temp=a1[i];
a1[i]=a1[j];
a1[j]=temp;
}
}
int temp=a1[l];
a1[l]=a1[i+1];
a1[i+1]=temp;
return (i+1);
}
void quicksorting(int a1[],int h,int l){
if(h<l){
int part=splitting(a1,h,l);
quicksorting(a1,h,part -1);
quicksorting(a1,part +1,l);
}
}
int main(){
int a1[5]={50,40,30,20,10};
cout<<"Executing Quick Sort.........\n";
for(int i=0;i<5;i++){
cout<<a1[i]<<" ";
}
cout<<"\n";
cout<<"\n";
quicksorting(a1,0,4);
cout<<"```";
for(int i=0;i<5;i++){
cout<<a1[i]<<" ";
}
cout<<"```";
cout<<"\n";
string arr1[5]={"abch","abcg","abcf","abce","abcd"};
cout<<"\n";
for(int i=0;i<5;i++){
cout<<arr1[i]<<" ";
}
cout<<"\n";
quicksortingstring(arr1,0,4);
cout<<"\n";
cout<<"```";
for(int i=0;i<5;i++){
cout<<arr1[i]<<" ";
}
cout<<"```";
cout<<"\n";
cout<<"This code was executed by Surindernath Sivakumar 21BCE3474";
}
