1. Implement the traversal methods, For the graph given below using
(i) DFS and (ii) BFS. Assume the unnamed vertex is X.

2. Implement the program to perform shortest path from the source vertex A to
all other vertices using Dijkstraâ€™s Algorithm for the given weighted graphs
G=(V,E)


Question 1:
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 6

// Structure to represent a graph node
struct GraphNode {
    int vertex;
    struct GraphNode* next;
};

// Function to create a new graph node
struct GraphNode* newGraphNode(int vertex) {
    struct GraphNode* node = (struct GraphNode*) malloc(sizeof(struct GraphNode));
    node->vertex = vertex;
    node->next = NULL;
    return node;
}

// Function to add an edge to the graph
void addEdge(struct GraphNode* adjList[], int u, int v) {
    struct GraphNode* node = newGraphNode(v);
    node->next = adjList[u];
    adjList[u] = node;
}

// Function to perform depth-first search (DFS) on the graph
void dfs(struct GraphNode* adjList[], int visited[], int vertex) {
    visited[vertex] = 1;
    printf("%c ", vertex + 'A');

    struct GraphNode* node = adjList[vertex];
    while (node != NULL) {
        int adjVertex = node->vertex;
        if (!visited[adjVertex]) {
            dfs(adjList, visited, adjVertex);
        }
        node = node->next;
    }
}

// Function to perform breadth-first search (BFS) on the graph
void bfs(struct GraphNode* adjList[], int visited[], int vertex) {
    int queue[MAX_VERTICES], front = 0, rear = -1;

    visited[vertex] = 1;
    queue[++rear] = vertex;

    while (front <= rear) {
        int currVertex = queue[front++];
        printf("%c ", currVertex + 'A');

        struct GraphNode* node = adjList[currVertex];
        while (node != NULL) {
            int adjVertex = node->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                queue[++rear] = adjVertex;
            }
            node = node->next;
        }
    }
}

// Main function
int main() {
    struct GraphNode* adjList[MAX_VERTICES];

    // Initialize the adjacency list
    for (int i = 0; i < MAX_VERTICES; i++) {
        adjList[i] = NULL;
    }

    // Add edges to the graph
    addEdge(adjList, 0, 1);
    addEdge(adjList, 0, 4);
    addEdge(adjList, 0, 5);
    addEdge(adjList, 1, 3);
    addEdge(adjList, 1, 4);
    addEdge(adjList, 2, 1);
    addEdge(adjList, 3, 2);
    addEdge(adjList, 3, 4);

    // Perform DFS on the graph
    printf("Depth-first search (DFS) traversal: ");
    int visited[MAX_VERTICES] = {0};
    dfs(adjList, visited, 0);
    printf("\n");

    // Perform BFS on the graph
    printf("Breadth-first search (BFS) traversal: ");
    for (int i = 0; i < MAX_VERTICES; i++) {
        visited[i] = 0;
    }
    bfs(adjList, visited, 0);
    printf("\n");

    return 0;
}






Question 2:

#include <bits/stdc++.h>
using namespace std;
template<typename T>
class Graph {
map<T, list<pair<T, int>>> l;
public:
void add(T x, T y, int wt) {
l[x].push_back({y, wt});
l[y].push_back({x, wt});
}
void print() {
for (auto p : l) {
T node = p.first;
cout << node << " -> ";
for (auto nbr : l[node]) {
cout << "(" << nbr.first << "," << nbr.second << ") ";
} cout << endl;
}
}
void DK(T src) {
map<T, int> dist;
for (auto p : l) {
T node = p.first;
dist[node] = INT_MAX;
}
dist[src] = 0;
set<pair<int, T>> s;
s.insert({dist[src], src});
while (!s.empty()) {
pair<int, T> p = *s.begin();
s.erase(s.begin());
T currNode = p.second;
int currNodeDist = p.first;
for (auto nbr : l[currNode]) {
T nbrNode = nbr.first;
int distInBetween = nbr.second;
int nbrNodeDist = dist[nbrNode];
if (currNodeDist + distInBetween < nbrNodeDist) {
auto pr = s.find({dist[nbrNode], nbrNode});
if (pr != s.end()) {
s.erase(pr);
}
dist[nbrNode] = currNodeDist + distInBetween;
s.insert({dist[nbrNode], nbrNode});
}
}
}
for (auto x : dist) {
cout<< "Shortest path from Source node(A) to "<<x.first<<" is: "<<endl;
cout<<endl;
cout << x.first << " is at distance " << x.second << " from source" << endl;
cout<<endl;
}
}
};
int main() {
Graph<string> g;
g.add("D", "A", 1);
g.add("A", "E", 8);
g.add("E", "D", 1);
g.add("A", "B", 2);
g.add("B", "C", 2);
g.add("C", "F", 5);
g.add("E", "F", 7);
g.add("C", "E", 4);
g.print();
cout << endl;
g.DK("A");
cout << endl;
g.DK("D");
cout<<"This Code Has Been Run And Excecuted Sucessfully By Surindernath Sivakumar 21BCE3474";
}
Output Screenshot:
