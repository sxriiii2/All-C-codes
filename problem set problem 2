In a shop, various products are there, but in the ledger, products are not maintained properly.
Define Product structure with attributes like prodID, prodName, Cost, Quantity. Create
ReadProd_Regno function to read n products and define a function named findProd_Regno to
traverse through the all products, sort and then find based on prodID. If product found
successfully, display the respective prodName, Quantity and total cost using printProd_Regno.





Algorithm:
//1. import all libraries and declare the required variables
//2. for a=0 a<n then a=a+1 and the same for the second variable also if Nos [a] > Nos [b] then temp
=Nos[a] Nos a= Nos b and Nos b = t
//3. for a=0 a<n then a=a+1 print Nos a
//4. for a=0 a<n then a=a+1 Nos a == check and print a
//5. int main and include the variable n and scan it then declare Nos=(int*)calloc(n,sizeof(int))
//6. Declare a and for a=0 a<n then a=a+1 scan a and include a new variable check and scan it and
sortProdID_21BCE3474(N,n,check)




Code:
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct Product {
 int prodID;
 char prodName[6];
 int Cost;
 int Quantity;
}P;
void ReadProd_21BCE3474(struct Product P[],int n){
 int a;
 for(a=0;a<n;a++){
 scanf("%d",&P[a].prodID);
 scanf("%s",P[a].prodName);
 scanf("%d",&P[a].Cost);
 scanf("%d",&P[a].Quantity);
 }
}
void findProd_21BCE3474(struct Product P[],int n,int produce){
 int a;
 int temp;
 int b;
 int *N;
 int c;
 int d;
 char m[5];
 N=(int*)calloc(n,sizeof(int));
 for(a=0;a<n;a++){
 N[a]=P[a].prodID;
 if(P[a].prodID==produce){
 c=P[a].Cost;
 d=P[a].Quantity;
 int k;
 for(k=0;k<5;k++){
 m[k]=P[a].prodName[k];
 }
 }
 }
 for(a=0;a<n;a++){
 for(b=a+1;b<n;b++){
 if(N[a] > N[b]) {
 temp = N[a];
 N[a] = N[b];
 N[b] = temp;
 }
 }
 }

 for(a=0;a<n;a++){
 printf("%d\n",N[a]);
 }
 printf("%s\n",m);
 printf("%d\n",d);
 printf("%d\n",c*d);

}
int main(){
 int n;
 scanf("%d",&n);
 struct Product P[n];

 ReadProd_21BCE3474(P,n);
 int produce;
 scanf("%d",&produce);
 findProd_21BCE3474(P,n,produce);
}
